{"version":3,"sources":["../../../../../libs/utils/src/namespaces/string.ts"],"sourcesContent":["import { adjectives, animals, uniqueNamesGenerator } from \"unique-names-generator\";\r\n\r\nimport { LayoutLocator, SortablePayload } from \"./types\";\r\n\r\nexport const getInitials = (name: string) => {\r\n  const regex = new RegExp(/(\\p{L}{1})\\p{L}+/, \"gu\");\r\n  const initials = [...name.matchAll(regex)] || [];\r\n\r\n  return ((initials.shift()?.[1] || \"\") + (initials.pop()?.[1] || \"\")).toUpperCase();\r\n};\r\n\r\nexport const isUrl = (string: string | null | undefined) => {\r\n  if (!string) return false;\r\n\r\n  const urlRegex = /https?:\\/\\/[^ \\n]+/i;\r\n\r\n  return urlRegex.test(string);\r\n};\r\n\r\nexport const isEmptyString = (string: string) => {\r\n  if (string === \"<p></p>\") return true;\r\n  return string.trim().length === 0;\r\n};\r\n\r\nexport const extractUrl = (string: string) => {\r\n  const urlRegex = /https?:\\/\\/[^ \\n]+/i;\r\n\r\n  const result = string.match(urlRegex);\r\n  return result ? result[0] : null;\r\n};\r\n\r\nexport const kebabCase = (string?: string | null) => {\r\n  if (!string) return \"\";\r\n\r\n  return (\r\n    string\r\n      .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\r\n      ?.join(\"-\")\r\n      .toLowerCase() ?? \"\"\r\n  );\r\n};\r\n\r\nexport const generateRandomName = () => {\r\n  return uniqueNamesGenerator({\r\n    dictionaries: [adjectives, adjectives, animals],\r\n    style: \"capital\",\r\n    separator: \" \",\r\n    length: 3,\r\n  });\r\n};\r\n\r\nexport const processUsername = (string?: string | null) => {\r\n  if (!string) return \"\";\r\n\r\n  return string.replace(/[^a-zA-Z0-9-.]/g, \"\").toLowerCase();\r\n};\r\n\r\nexport const parseLayoutLocator = (payload: SortablePayload | null): LayoutLocator => {\r\n  if (!payload) return { page: 0, column: 0, section: 0 };\r\n\r\n  const section = payload.index as number;\r\n  const [page, column] = payload.containerId.split(\".\").map(Number);\r\n\r\n  return { page, column, section };\r\n};\r\n"],"names":["extractUrl","generateRandomName","getInitials","isEmptyString","isUrl","kebabCase","parseLayoutLocator","processUsername","name","initials","regex","RegExp","matchAll","shift","pop","toUpperCase","string","urlRegex","test","trim","length","result","match","join","toLowerCase","uniqueNamesGenerator","dictionaries","adjectives","animals","style","separator","replace","payload","page","column","section","index","containerId","split","map","Number"],"mappings":";;;;;;;;;;;IAwBaA,UAAU;eAAVA;;IAkBAC,kBAAkB;eAAlBA;;IAtCAC,WAAW;eAAXA;;IAeAC,aAAa;eAAbA;;IARAC,KAAK;eAALA;;IAoBAC,SAAS;eAATA;;IA0BAC,kBAAkB;eAAlBA;;IANAC,eAAe;eAAfA;;;sCAnD6C;AAInD,MAAML,cAAc,CAACM;QAIjBC,iBAAgCA;IAHzC,MAAMC,QAAQ,IAAIC,OAAO,8BAAoB;IAC7C,MAAMF,WAAW;WAAID,KAAKI,QAAQ,CAACF;KAAO,IAAI,EAAE;IAEhD,OAAO,AAAC,CAAA,AAACD,CAAAA,EAAAA,kBAAAA,SAASI,KAAK,uBAAdJ,eAAkB,CAAC,EAAE,KAAI,EAAC,IAAMA,CAAAA,EAAAA,gBAAAA,SAASK,GAAG,uBAAZL,aAAgB,CAAC,EAAE,KAAI,EAAC,CAAC,EAAGM,WAAW;AAClF;AAEO,MAAMX,QAAQ,CAACY;IACpB,IAAI,CAACA,QAAQ,OAAO;IAEpB,MAAMC,WAAW;IAEjB,OAAOA,SAASC,IAAI,CAACF;AACvB;AAEO,MAAMb,gBAAgB,CAACa;IAC5B,IAAIA,WAAW,WAAW,OAAO;IACjC,OAAOA,OAAOG,IAAI,GAAGC,MAAM,KAAK;AAClC;AAEO,MAAMpB,aAAa,CAACgB;IACzB,MAAMC,WAAW;IAEjB,MAAMI,SAASL,OAAOM,KAAK,CAACL;IAC5B,OAAOI,SAASA,MAAM,CAAC,EAAE,GAAG;AAC9B;AAEO,MAAMhB,YAAY,CAACW;QAItBA;IAHF,IAAI,CAACA,QAAQ,OAAO;QAGlBA;IADF,OACEA,CAAAA,kCAAAA,gBAAAA,OACGM,KAAK,CAAC,0FADTN,cAEIO,IAAI,CAAC,KACNC,WAAW,cAHdR,iCAGoB;AAExB;AAEO,MAAMf,qBAAqB;IAChC,OAAOwB,IAAAA,0CAAoB,EAAC;QAC1BC,cAAc;YAACC,gCAAU;YAAEA,gCAAU;YAAEC,6BAAO;SAAC;QAC/CC,OAAO;QACPC,WAAW;QACXV,QAAQ;IACV;AACF;AAEO,MAAMb,kBAAkB,CAACS;IAC9B,IAAI,CAACA,QAAQ,OAAO;IAEpB,OAAOA,OAAOe,OAAO,CAAC,mBAAmB,IAAIP,WAAW;AAC1D;AAEO,MAAMlB,qBAAqB,CAAC0B;IACjC,IAAI,CAACA,SAAS,OAAO;QAAEC,MAAM;QAAGC,QAAQ;QAAGC,SAAS;IAAE;IAEtD,MAAMA,UAAUH,QAAQI,KAAK;IAC7B,MAAM,CAACH,MAAMC,OAAO,GAAGF,QAAQK,WAAW,CAACC,KAAK,CAAC,KAAKC,GAAG,CAACC;IAE1D,OAAO;QAAEP;QAAMC;QAAQC;IAAQ;AACjC"}